#!/usr/bin/env node

/**
 * Quick Setup Script for CrisisAssist
 * This script helps you configure the basic environment
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function quickSetup() {
  console.log('🚀 CrisisAssist Quick Setup');
  console.log('==========================\n');
  console.log('This script will help you set up the basic configuration.\n');

  try {
    // Get Descope Project ID
    console.log('🔐 DESCOPE CONFIGURATION');
    console.log('First, you need a Descope account and project.');
    console.log('Visit: https://app.descope.com\n');
    
    const projectId = await question('Enter your Descope Project ID (or press Enter to use demo): ');
    const managementKey = await question('Enter your Descope Management Key (or press Enter to skip): ');

    // External services
    console.log('\n🌐 EXTERNAL SERVICES (Optional)');
    console.log('You can skip these and use demo mode for now.\n');
    
    const googleClientId = await question('Google Calendar Client ID (or press Enter to skip): ');
    const slackBotToken = await question('Slack Bot Token (or press Enter to skip): ');
    const twilioSid = await question('Twilio Account SID (or press Enter to skip): ');
    const twilioToken = await question('Twilio Auth Token (or press Enter to skip): ');
    const twilioPhone = await question('Twilio Phone Number (or press Enter to skip): ');

    // Database
    console.log('\n🗄️  DATABASE CONFIGURATION');
    const dbUrl = await question('Database URL (or press Enter for default): ') || 
                  'postgresql://username:password@localhost:5432/crisisassist';

    // Generate environment files
    console.log('\n📝 Generating configuration files...');

    const backendEnv = generateBackendEnv({
      projectId: projectId || 'P32MRE2ZmteTfJbXE3AK1wNIx2uC',
      managementKey: managementKey || 'demo_management_key',
      googleClientId,
      slackBotToken,
      twilioSid,
      twilioToken,
      twilioPhone,
      dbUrl
    });

    const frontendEnv = generateFrontendEnv({
      projectId: projectId || 'P32MRE2ZmteTfJbXE3AK1wNIx2uC'
    });

    // Write files
    writeEnvFile('.env', backendEnv);
    writeEnvFile('frontend/.env', frontendEnv);

    // Generate test script
    generateTestScript();

    console.log('\n✅ Setup completed successfully!');
    console.log('\n📋 Next steps:');
    console.log('1. Install dependencies:');
    console.log('   npm install');
    console.log('   cd frontend && npm install');
    console.log('');
    console.log('2. Test your setup:');
    console.log('   node test-setup.js');
    console.log('');
    console.log('3. Start the application:');
    console.log('   # Terminal 1:');
    console.log('   npm run dev');
    console.log('   # Terminal 2:');
    console.log('   cd frontend && npm run dev');
    console.log('');
    console.log('4. Visit: http://localhost:3000');
    console.log('');
    console.log('📚 For detailed setup instructions, see:');
    console.log('   - DESCOPE_SETUP_FINAL.md');
    console.log('   - EXTERNAL_SERVICES_SIMPLE.md');

  } catch (error) {
    console.error('❌ Setup failed:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

function generateBackendEnv(config) {
  return `# CrisisAssist Backend Configuration
# Generated by quick-setup.js

# Descope Configuration
DESCOPE_PROJECT_ID=${config.projectId}
DESCOPE_MANAGEMENT_KEY=${config.managementKey}

# Database Configuration
DATABASE_URL=${config.dbUrl}
DB_HOST=localhost
DB_PORT=5432
DB_NAME=crisisassist
DB_USER=username
DB_PASSWORD=password

# Server Configuration
PORT=3001
NODE_ENV=development
JWT_SECRET=your_jwt_secret_key_change_this_in_production
API_BASE_URL=http://localhost:3001

# Frontend Configuration
NEXT_PUBLIC_API_URL=http://localhost:3001
NEXT_PUBLIC_DESCOPE_PROJECT_ID=${config.projectId}

# External Services Configuration
GOOGLE_CALENDAR_CLIENT_ID=${config.googleClientId || 'your_google_client_id'}
GOOGLE_CALENDAR_CLIENT_SECRET=your_google_client_secret
SLACK_BOT_TOKEN=${config.slackBotToken || 'xoxb-your-slack-bot-token'}
SLACK_CHANNEL_ALERTS=#emergency-alerts
TWILIO_ACCOUNT_SID=${config.twilioSid || 'your_twilio_account_sid'}
TWILIO_AUTH_TOKEN=${config.twilioToken || 'your_twilio_auth_token'}
TWILIO_PHONE_NUMBER=${config.twilioPhone || '+1234567890'}

# Security Configuration
CORS_ORIGIN=http://localhost:3000
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Logging Configuration
LOG_LEVEL=info
LOG_FORMAT=combined

# Demo Configuration
DEMO_MODE=true
DEMO_PHONE_NUMBER=+1234567890
DEMO_ALERT_WEBHOOK_URL=http://localhost:3001/api/alerts/webhook
`;
}

function generateFrontendEnv(config) {
  return `# CrisisAssist Frontend Configuration
# Generated by quick-setup.js

# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:3001

# Descope Configuration
NEXT_PUBLIC_DESCOPE_PROJECT_ID=${config.projectId}

# Development Settings
NODE_ENV=development
NEXT_PUBLIC_APP_ENV=development

# Optional: Analytics and Monitoring
NEXT_PUBLIC_ANALYTICS_ID=
NEXT_PUBLIC_SENTRY_DSN=
`;
}

function writeEnvFile(filePath, content) {
  try {
    const fullPath = path.resolve(filePath);
    const dir = path.dirname(fullPath);
    
    // Create directory if it doesn't exist
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    fs.writeFileSync(fullPath, content);
    console.log(`   ✅ Created ${filePath}`);
  } catch (error) {
    console.error(`   ❌ Failed to create ${filePath}:`, error.message);
  }
}

function generateTestScript() {
  const testScript = `#!/usr/bin/env node

/**
 * Test CrisisAssist Setup
 * This script verifies your configuration
 */

require('dotenv').config();

async function testSetup() {
  console.log('🧪 Testing CrisisAssist Setup');
  console.log('=============================\\n');

  let allGood = true;

  // Test environment variables
  console.log('📋 Checking environment variables...');
  
  const required = [
    'DESCOPE_PROJECT_ID',
    'DATABASE_URL',
    'PORT'
  ];

  const optional = [
    'DESCOPE_MANAGEMENT_KEY',
    'GOOGLE_CALENDAR_CLIENT_ID',
    'SLACK_BOT_TOKEN',
    'TWILIO_ACCOUNT_SID'
  ];

  required.forEach(key => {
    if (process.env[key]) {
      console.log(\`   ✅ \${key}: \${process.env[key].substring(0, 20)}...\`);
    } else {
      console.log(\`   ❌ \${key}: Missing (required)\`);
      allGood = false;
    }
  });

  optional.forEach(key => {
    if (process.env[key] && process.env[key] !== \`your_\${key.toLowerCase()}\`) {
      console.log(\`   ✅ \${key}: Configured\`);
    } else {
      console.log(\`   ⚠️  \${key}: Not configured (will use demo mode)\`);
    }
  });

  // Test file structure
  console.log('\\n📁 Checking file structure...');
  const files = [
    'package.json',
    'frontend/package.json',
    '.env',
    'frontend/.env'
  ];

  files.forEach(file => {
    if (require('fs').existsSync(file)) {
      console.log(\`   ✅ \${file}\`);
    } else {
      console.log(\`   ❌ \${file}: Missing\`);
      allGood = false;
    }
  });

  // Test demo mode
  console.log('\\n🎭 Demo mode status...');
  if (process.env.DEMO_MODE === 'true') {
    console.log('   ✅ Demo mode enabled - system will work without external services');
  } else {
    console.log('   ⚠️  Demo mode disabled - external services must be configured');
  }

  // Summary
  console.log('\\n📊 Setup Summary:');
  if (allGood) {
    console.log('   🎉 Your CrisisAssist setup looks good!');
    console.log('   🚀 Ready to start the application');
  } else {
    console.log('   ⚠️  Some issues found - check the messages above');
    console.log('   📚 See setup guides for help');
  }

  console.log('\\n📋 Next steps:');
  console.log('   1. npm install && cd frontend && npm install');
  console.log('   2. npm run dev (in root directory)');
  console.log('   3. cd frontend && npm run dev (in another terminal)');
  console.log('   4. Visit http://localhost:3000');
}

testSetup();
`;

  writeEnvFile('test-setup.js', testScript);
  
  // Make script executable
  try {
    fs.chmodSync('test-setup.js', '755');
  } catch (error) {
    // Ignore chmod errors on Windows
  }
}

// Run the setup
if (require.main === module) {
  quickSetup();
}

module.exports = { quickSetup };